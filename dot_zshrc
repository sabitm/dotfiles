# ===============================================================
# zsh setup and initialization                                  =
# ===============================================================

# lines configured by zsh-newuser-install
HISTFILE=~/.histfile
HISTSIZE=1000
SAVEHIST=1000
unsetopt beep
bindkey -e
# end of lines configured by zsh-newuser-install
# the following lines were added by compinstall
zstyle :compinstall filename '/home/sabit/.zshrc'

autoload -Uz compinit
compinit
# end of lines added by compinstall

# autoload zcalc
autoload -Uz zcalc

# ===============================================================
# zsh alias                                                     =
# ===============================================================

# user defined alias
alias acpi='acpi -i'
alias caps2ctrl='sudo loadkeys /usr/share/keymaps/caps2ctrl.map'
alias caps2ctrloff='sudo loadkeys -d'
alias caps2ctrlx="setxkbmap -option 'ctrl:nocaps'"
alias caps2ctrlxoff='setxkbmap -option'
alias cd..='cd ..'
alias cdold='cd $OLDPWD'
alias cz='chezmoi'
alias df='df -h'
alias diff='diff --color=auto'
alias fd='fd -H'
alias free='free -h'
alias ga='git add'
alias gc='git commit'
alias gcm='git commit -m'
alias gl='git log'
alias gs='git status'
alias grep='grep --color=auto'
alias iotop='sudo iotop'
alias jqc='jq -C'
alias lessc='less -RFX'
alias ls='exa'
alias lsa='exa -a'
alias lsl='exa -ls newest'
alias lsla='exa -las newest'
alias lsp='find $PWD -maxdepth 1 ! -path $PWD'
alias lswcl='ls | wc -l'
alias nnn='nnn -dco'
alias paru='PKGEXT=.pkg.tar paru'
alias piplotpng='gnuplot -e "set terminal png; plot \"-\" with lines"'
alias rgc='rg -p'
alias ssa='ss -plat'
alias startx='startx -- -keeptty > ~/.xorg.log 2>&1'
alias suspended='systemctl suspend'
alias torstart='sudo systemctl start tor.service'
alias torstop='sudo systemctl stop tor.service'
alias tslen='gtranslate -s en -t id'
alias tslid='gtranslate -s id -t en'
alias ubdown='nmcli c down VPN\ UB'
alias ubup='nmcli c up VPN\ UB'
alias uptime='uptime -p'
alias wcl='wc -l'
alias wlc='wl-copy'
alias wlp='wl-paste'
alias yay='PKGEXT=.pkg.tar yay'
alias zcalc='zcalc -f'

# ===============================================================
# zsh source import                                             =
# ===============================================================

# zsh autosuggestions
source /usr/share/zsh/plugins/zsh-autosuggestions/zsh-autosuggestions.zsh

# fzf zsh completion
source /usr/share/fzf/completion.zsh

# fzf zsh keybindings
source /usr/share/fzf/key-bindings.zsh

# execute navi as Ctrl-G from shell
source <(navi widget zsh)

# zoxide init shell
source <(zoxide init zsh)

# ===============================================================
# zsh user bindkey                                              =
# ===============================================================

# terminal-specific keybindings
bindkey "^[[1~" beginning-of-line
bindkey "^[[7~" beginning-of-line
bindkey "^[[H" beginning-of-line
bindkey "^[[4~" end-of-line
bindkey "^[[8~" end-of-line
bindkey "^[[F" end-of-line
bindkey "^[[3~" delete-char
bindkey "^[ " autosuggest-accept
bindkey "^[^M" autosuggest-execute

# fzf completion keybindings
bindkey '^I' $fzf_default_completion
bindkey '^[i' fzf-completion

# ===============================================================
# zsh zstyle settings                                           =
# ===============================================================

# case-insensitive autocomplete
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Za-z}'

# insert slash on special-dirs autocomplete
zstyle ':completion:*' special-dirs true

# ===============================================================
# zsh environment variable                                      =
# ===============================================================

# prompt shell
PROMPT='%F{green}%B%n%b%f:%F{blue}%B%1~%b%f %# '

# xDG config home
export XDG_CONFIG_HOME="$HOME/.config/"

# export additional path
export PATH=$PATH:/home/sabit/go/bin:~/.local/bin:~/.gem/ruby/2.7.0/bin

# unset fzf completion trigger
export FZF_COMPLETION_TRIGGER=''

# export editor variable
export EDITOR=vim

# use sccache for build artifacts
export RUSTC_WRAPPER=/usr/bin/sccache

# nnn bookmark list
export NNN_BMS='c:~/.config;d:~/Downloads/;a:/home/sabit/Remote/Android/storage/emulated/0;r:/home/sabit/Remote;u:/run/media/sabit'

# nnn plugin configuration
export NNN_PLUG='a:autojump;b:bookmarks'

# configure wordchars to exclude some non-alphanumeric as word
WORDCHARS='.-_'

# ===============================================================
# zsh function definition                                       =
# ===============================================================

# setting manpages syntax coloring
function man() {
    LESS_TERMCAP_md=$'\e[01;31m' \
    LESS_TERMCAP_me=$'\e[0m' \
    LESS_TERMCAP_se=$'\e[0m' \
    LESS_TERMCAP_so=$'\e[01;44;33m' \
    LESS_TERMCAP_ue=$'\e[0m' \
    LESS_TERMCAP_us=$'\e[01;32m' \
    command man "$@"
}

# unknown(?)
function _systemctl_unit_state() {
  typeset -gA _sys_unit_state
  _sys_unit_state=( $(__systemctl list-unit-files "$PREFIX*" | awk '{print $1, $2}') )
}

# set http proxy
function proxyon() {
    export HTTP_PROXY='127.0.0.1:8080'
    export HTTPS_PROXY='127.0.0.1:8080'
}

# unset http proxy
function proxyoff() {
    unset HTTP_PROXY
    unset HTTPS_PROXY
}

# nnn quitcd function
function n () {
    # Block nesting of nnn in subshells
    if [ -n $NNNLVL ] && [ "${NNNLVL:-0}" -ge 1 ]; then
        echo "nnn is already running"
        return
    fi

    # The default behaviour is to cd on quit (nnn checks if NNN_TMPFILE is set)
    # To cd on quit only on ^G, remove the "export" as in:
    #     NNN_TMPFILE="${XDG_CONFIG_HOME:-$HOME/.config}/nnn/.lastd"
    # NOTE: NNN_TMPFILE is fixed, should not be modified
    NNN_TMPFILE="${XDG_CONFIG_HOME:-$HOME/.config}/nnn/.lastd"

    # Unmask ^Q (, ^V etc.) (if required, see `stty -a`) to Quit nnn
    # stty start undef
    # stty stop undef
    # stty lwrap undef
    # stty lnext undef

    nnn "$@"

    if [ -f "$NNN_TMPFILE" ]; then
            . "$NNN_TMPFILE"
            rm -f "$NNN_TMPFILE" > /dev/null
    fi
}

# youtube Search and Player with mpv
function yta() {
    # echo ytdl://ytsearch"$1":"${*:2}"
    mpv --ytdl-format=bestaudio ytdl://ytsearch"$1":"${*:2}"
}

if [[ $TERM == "alacritty" && -z $TMUX ]]; then
    exec tmux
fi
