" load defaults.vim configuration
unlet! skip_defaults_vim
source $VIMRUNTIME/defaults.vim

" load archlinux.vim configuration
runtime! archlinux.vim

" install vim-plug if not found
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
endif

" run PlugInstall if there are missing plugins
autocmd VimEnter * if len(filter(values(g:plugs), '!isdirectory(v:val.dir)'))
  \| PlugInstall --sync | source $MYVIMRC
\| endif

" vim-plug init
call plug#begin('~/.vim/plugged')

Plug 'dhruvasagar/vim-table-mode'
Plug 'easymotion/vim-easymotion'
Plug 'frazrepo/vim-rainbow'
Plug 'godlygeek/tabular'
Plug 'itchyny/lightline.vim'
Plug 'jeetsukumaran/vim-indentwise'
Plug 'jiangmiao/auto-pairs'
Plug 'junegunn/fzf.vim'
Plug 'junegunn/vim-easy-align'
Plug 'kana/vim-textobj-entire'
Plug 'kana/vim-textobj-user'
Plug 'mattn/emmet-vim'
Plug 'mengelbrecht/lightline-bufferline'
Plug 'mg979/vim-visual-multi'
Plug 'preservim/nerdtree'
Plug 'prettier/vim-prettier'
Plug 'sabitm/vim-system-copy'
Plug 'stephpy/vim-yaml'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-eunuch'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
Plug 'udalov/kotlin-vim'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'wellle/targets.vim'

" initialize plugin system
call plug#end()

" fix lightline not showing
set laststatus=2

" map <Leader> to <Space>
nnoremap <Space> <NOP>
let mapleader = "\<Space>"

" vim user keybinding
map <C-k> :NERDTreeToggle<CR>
nmap <Leader>1 mb<Plug>lightline#bufferline#go(1)'bzz
nmap <Leader>2 mb<Plug>lightline#bufferline#go(2)'bzz
nmap <Leader>3 mb<Plug>lightline#bufferline#go(3)'bzz
nmap <Leader>4 mb<Plug>lightline#bufferline#go(4)'bzz
nmap <Leader>5 mb<Plug>lightline#bufferline#go(5)'bzz
nmap <Leader>6 mb<Plug>lightline#bufferline#go(6)'bzz
nmap <Leader>7 mb<Plug>lightline#bufferline#go(7)'bzz
nmap <Leader>8 mb<Plug>lightline#bufferline#go(8)'bzz
nmap <Leader>9 mb<Plug>lightline#bufferline#go(9)'bzz
nmap <Leader>0 mb<Plug>lightline#bufferline#go(10)'bzz
nnoremap <Leader>S1 :tabdo NERDTreeClose<CR>:mksession! ~/.vimsession/vimsession-1<CR>
nnoremap <Leader>S2 :tabdo NERDTreeClose<CR>:mksession! ~/.vimsession/vimsession-2<CR>
nnoremap <Leader>S3 :tabdo NERDTreeClose<CR>:mksession! ~/.vimsession/vimsession-3<CR>
nnoremap <Leader>S4 :tabdo NERDTreeClose<CR>:mksession! ~/.vimsession/vimsession-4<CR>
nnoremap <Leader>S5 :tabdo NERDTreeClose<CR>:mksession! ~/.vimsession/vimsession-5<CR>
nnoremap <Leader>S6 :tabdo NERDTreeClose<CR>:mksession! ~/.vimsession/vimsession-6<CR>
nnoremap <Leader>S7 :tabdo NERDTreeClose<CR>:mksession! ~/.vimsession/vimsession-7<CR>
nnoremap <Leader>S8 :tabdo NERDTreeClose<CR>:mksession! ~/.vimsession/vimsession-8<CR>
nnoremap <Leader>S9 :tabdo NERDTreeClose<CR>:mksession! ~/.vimsession/vimsession-9<CR>
nnoremap <Leader>S0 :tabdo NERDTreeClose<CR>:mksession! ~/.vimsession/vimsession-10<CR>
nnoremap <Leader>s1 :source ~/.vimsession/vimsession-1<CR>
nnoremap <Leader>s2 :source ~/.vimsession/vimsession-2<CR>
nnoremap <Leader>s3 :source ~/.vimsession/vimsession-3<CR>
nnoremap <Leader>s4 :source ~/.vimsession/vimsession-4<CR>
nnoremap <Leader>s5 :source ~/.vimsession/vimsession-5<CR>
nnoremap <Leader>s6 :source ~/.vimsession/vimsession-6<CR>
nnoremap <Leader>s7 :source ~/.vimsession/vimsession-7<CR>
nnoremap <Leader>s8 :source ~/.vimsession/vimsession-8<CR>
nnoremap <Leader>s9 :source ~/.vimsession/vimsession-9<CR>
nnoremap <Leader>s0 :source ~/.vimsession/vimsession-10<CR>
inoremap <special> <expr> <Esc>[200~ XTermPasteBegin()
nnoremap <Esc>l <Esc>
inoremap <Esc>l <Esc>
inoremap jj <Esc>
vnoremap <Esc>l <Esc>
nnoremap <Leader>cd :cd %:p:h<CR>:pwd<CR>
nnoremap <Leader>d "_
vnoremap <Leader>d "_
" search selected text
vnoremap // y/\V<C-R>=escape(@",'/\')<CR><CR>
" start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)
" start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)
" capital y to behave like capital d or c
nnoremap Y y$
" copy until EOL to system clipboard
nmap zY zy$
nnoremap <Leader>w :call ToggleWrapMode()<CR>
" coc scroll float
nnoremap <nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1, 1) : "\<C-f>"
nnoremap <nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0, 1) : "\<C-b>"
inoremap <nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1, 1)\<cr>" : "\<Right>"
inoremap <nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0, 1)\<cr>" : "\<Left>"
" fzf binding
nnoremap <C-p> :FZF<CR>

" disable timeout and enable ttimeout
set notimeout
set ttimeout

" auto pairs plugin config
nnoremap <expr> <Plug>AutoPairsFastWrapPlug ':call AutoPairsFastWrap()<CR>'
nmap <silent> <Leader>e <Plug>AutoPairsFastWrapPlug
silent! call repeat#set("\<Plug>AutoPairsFastWrapPlug", v:count)

" vim custom command
" closing buffer cleanly
command -nargs=? -bang BW :silent! argd % | bw<bang><args>

" disable mouse
set mouse=

" set lazyredraw
set lazyredraw

" change tab to space
set expandtab

" enable relative number and number
set relativenumber
set number

" set paste mode every pasting in insert mode
let &t_SI .= "\<Esc>[?2004h"
let &t_EI .= "\<Esc>[?2004l"

" raw paste function
function! XTermPasteBegin()
    set pastetoggle=<Esc>[201~
    set paste
    return ""
endfunction

let s:wrapMode=0

" toggle wrap mode on/off
function! ToggleWrapMode()
    if s:wrapMode
        call WrapModeOff()
        let s:wrapMode = 0
    else
        call WrapModeOn()
        let s:wrapMode = 1
    endif

    return ""
endfunction

" wrapmodeon for multiline editing
function! WrapModeOn()
    nnoremap j gj
    vnoremap j gj
    nnoremap k gk
    vnoremap k gk
    nnoremap 0 g0
    vnoremap 0 g0
    nnoremap $ g$
    vnoremap $ g$
    nnoremap ^ g^
    vnoremap ^ g^
    set linebreak
    return ""
endfunction

" wrapmodeoff
function! WrapModeOff()
    nunmap j
    vunmap j
    nunmap k
    vunmap k
    nunmap 0
    vunmap 0
    nunmap $
    vunmap $
    nunmap ^
    vunmap ^
    set linebreak!
    return ""
endfunction

" disable showmode (mode specified by lightline)
set noshowmode

" always show tabline
set showtabline=2

" lightline buffer tab configuration
let g:lightline = {
  \ 'tabline': {
  \     'left': [ [ 'buffers' ] ],
  \     'right': [ [ '' ] ]
  \ },
  \ 'component_expand': {
  \     'buffers': 'lightline#bufferline#buffers'
  \ },
  \ 'component_type': {
  \     'buffers': 'tabsel'
  \ }
\ }
let g:lightline#bufferline#show_number  = 2
let g:lightline#bufferline#filename_modifier = ':t'
let g:lightline#bufferline#unnamed      = '[No Name]'

" lightline-buffer update modified indicator
autocmd BufWritePost,TextChanged,TextChangedI * call lightline#update()

" adding '**' to path for fuzzy find
set path+=**

" set hidden buffer
set hidden

" search to be case insensitive
set ignorecase
set smartcase

" enable incremental search
set incsearch

" set black menu with white text
hi Pmenu ctermbg=black ctermfg=white

" table-mode corner set
let g:table_mode_corner_corner ='+'
let g:table_mode_header_fillchar ='-'

" tab setting on each file
autocmd FileType c,cpp,java,markdown,rust,text,vim,zsh setlocal ts=4 sts=4 sw=4 expandtab
autocmd FileType bash,css,html,javascript,sh,typescript setlocal ts=2 sts=2 sw=2 expandtab
